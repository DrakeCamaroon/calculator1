import java.util.Scanner;
import java.util.Stack;

public class ComplexCalculator {
    
    private static final String OPERATORS = "+-*/";
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.print("Enter an arithmetic expression: ");
        String expression = scanner.nextLine();
        
        try {
            double result = evaluateExpression(expression);
            System.out.println("Result: " + result);
        } catch (IllegalArgumentException e) {
            System.out.println("Error: " + e.getMessage());
        }
        
        scanner.close();
    }
    
    private static double evaluateExpression(String expression) {
        String postfixExpression = convertToPostfix(expression);
        return evaluatePostfix(postfixExpression);
    }
    
    private static String convertToPostfix(String expression) {
        StringBuilder postfix = new StringBuilder();
        Stack<Character> stack = new Stack<>();
        
        for (int i = 0; i < expression.length(); i++) {
            char ch = expression.charAt(i);
            
            if (Character.isDigit(ch) || ch == '.') {
                // Append digits and decimal points directly to the postfix expression
                postfix.append(ch);
            } else if (ch == '(') {
                // Push opening parenthesis onto the stack
                stack.push(ch);
            } else if (ch == ')') {
                // Pop operators from the stack and append them to the postfix expression until
                // an opening parenthesis is encountered
                while (!stack.isEmpty() && stack.peek() != '(') {
                    postfix.append(stack.pop());
                }
                
                if (!stack.isEmpty() && stack.peek() == '(') {
                    stack.pop(); // Remove the opening parenthesis from the stack
                } else {
                    throw new IllegalArgumentException("Invalid expression: Unbalanced parentheses");
                }
            } else if (OPERATORS.contains(Character.toString(ch))) {
                // Pop operators from the stack and append them to the postfix expression if they have higher
                // or equal precedence compared to the current operator
                while (!stack.isEmpty() && stack.peek() != '(' && hasPrecedence(stack.peek(), ch)) {
                    postfix.append(stack.pop());
                }
                
                stack.push(ch); // Push the current operator onto the stack
            } else if (!Character.isWhitespace(ch)) {
                throw new IllegalArgumentException("Invalid expression: Unknown character '" + ch + "'");
            }
        }
        
        // Pop any remaining operators from the stack and append them to the postfix expression
        while (!stack.isEmpty()) {
            if (stack.peek() == '(') {
                throw new IllegalArgumentException("Invalid expression: Unbalanced parentheses");
            }
            
            postfix.append(stack.pop());
        }
        
        return postfix.toString();
    }
    
    private static boolean hasPrecedence(char op1, char op2) {
        if ((op1 == '*' || op1 == '/') && (op2 == '+' || op2 == '-')) {
            return true;
        }
        
        return false;
    }
    
    private static double evaluatePostfix(String postfixExpression) {
        Stack<Double> stack = new Stack<>();
        
        for (int i = 0; i < postfixExpression.length(); i++) {
            char ch = postfixExpression.charAt(i);
            
            if (Character.isDigit(ch)) {
                // Convert digits to a number and push onto the stack
                StringBuilder num = new StringBuilder();
                while (i < postfixExpression.length() && (Character.isDigit(postfixExpression.charAt(i))
                        || postfixExpression.charAt(i) == '.')) {
                    num.append(postfixExpression.charAt(i++));
                }
                
                i--; // Move back one position
